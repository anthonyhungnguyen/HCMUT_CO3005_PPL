Program([FuncDecl(Id(main),[],IntType,Block([VarDecl(dividend,IntType),VarDecl(divisor,IntType),VarDecl(quotient,IntType),VarDecl(remainder,IntType),CallExpr(Id(printf),[StringLiteral(Enter dividend: )]),CallExpr(Id(scanf),[StringLiteral(%d),Id(dividend)]),CallExpr(Id(printf),[StringLiteral(Enter divisor: )]),CallExpr(Id(scanf),[StringLiteral(%d),Id(divisor)]),BinaryOp(=,Id(quotient),BinaryOp(/,Id(dividend),Id(divisor))),BinaryOp(=,Id(remainder),BinaryOp(%,Id(dividend),Id(divisor))),CallExpr(Id(printf),[StringLiteral(Quotient = %d\n),Id(quotient)]),CallExpr(Id(printf),[StringLiteral(Remainder = %d),Id(remainder)]),Return(IntLiteral(0))]))])